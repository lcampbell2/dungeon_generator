[{"/home/user/dbms_project/dungeon_generator/client/src/App.js":"1","/home/user/dbms_project/dungeon_generator/client/src/index.js":"2","/home/user/dbms_project/dungeon_generator/client/src/components/LandingPage.js":"3","/home/user/dbms_project/dungeon_generator/client/src/components/ListPage.js":"4","/home/user/dbms_project/dungeon_generator/client/src/components/Table.js":"5","/home/user/dbms_project/dungeon_generator/client/src/components/Room.js":"6","/home/user/dbms_project/dungeon_generator/client/src/components/BossRoom.js":"7","/home/user/dbms_project/dungeon_generator/client/src/components/PuzzleRoom.js":"8","/home/user/dbms_project/dungeon_generator/client/src/components/TrapRoom.js":"9","/home/user/dbms_project/dungeon_generator/client/src/components/MonsterRoom.js":"10","/home/user/dbms_project/dungeon_generator/client/src/components/SubmitForm.js":"11","/home/user/dbms_project/dungeon_generator/client/src/components/MonsterForm.js":"12","/home/user/dbms_project/dungeon_generator/client/src/components/BossForm.js":"13","/home/user/dbms_project/dungeon_generator/client/src/components/PuzzleForm.js":"14","/home/user/dbms_project/dungeon_generator/client/src/components/TrapForm.js":"15","/home/user/dbms_project/dungeon_generator/client/src/components/TreasureForm.js":"16"},{"size":1028,"mtime":1606779832241,"results":"17","hashOfConfig":"18"},{"size":355,"mtime":1606778819629,"results":"19","hashOfConfig":"18"},{"size":2093,"mtime":1606846149921,"results":"20","hashOfConfig":"18"},{"size":1971,"mtime":1606851535308,"results":"21","hashOfConfig":"18"},{"size":1294,"mtime":1606793943987,"results":"22","hashOfConfig":"18"},{"size":1137,"mtime":1606845951675,"results":"23","hashOfConfig":"18"},{"size":1969,"mtime":1606849842219,"results":"24","hashOfConfig":"18"},{"size":1750,"mtime":1606857466194,"results":"25","hashOfConfig":"18"},{"size":1394,"mtime":1606850320036,"results":"26","hashOfConfig":"18"},{"size":1819,"mtime":1606848924817,"results":"27","hashOfConfig":"18"},{"size":839,"mtime":1606851502092,"results":"28","hashOfConfig":"18"},{"size":4558,"mtime":1606914677409,"results":"29","hashOfConfig":"18"},{"size":5473,"mtime":1606861208196,"results":"30","hashOfConfig":"18"},{"size":4993,"mtime":1606861200522,"results":"31","hashOfConfig":"18"},{"size":3593,"mtime":1606861193921,"results":"32","hashOfConfig":"18"},{"size":3603,"mtime":1606861187636,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"j3v2ct",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/user/dbms_project/dungeon_generator/client/src/App.js",[],["73","74"],"/home/user/dbms_project/dungeon_generator/client/src/index.js",[],"/home/user/dbms_project/dungeon_generator/client/src/components/LandingPage.js",[],"/home/user/dbms_project/dungeon_generator/client/src/components/ListPage.js",[],"/home/user/dbms_project/dungeon_generator/client/src/components/Table.js",[],["75","76"],"/home/user/dbms_project/dungeon_generator/client/src/components/Room.js",["77"],"import { Stack } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { BossRoom } from \"./BossRoom\";\nimport { MonsterRoom } from \"./MonsterRoom\";\nimport { PuzzleRoom } from \"./PuzzleRoom\";\nimport { TrapRoom } from \"./TrapRoom\";\n\nexport function Room({ roomType }) {\n  const [tableSize, setTableSize] = useState(0);\n\n  const getTableSize = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/${roomType}.size`);\n      const jsonData = await response.json();\n      setTableSize(jsonData[0].size);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getTableSize();\n  }, [roomType]);\n\n  const randID = Math.floor(Math.random() * tableSize) + 1;\n\n  const switchRooms = () => {\n    switch (roomType) {\n      case \"monsters\":\n        return <MonsterRoom id={randID} />;\n      case \"traps\":\n        return <TrapRoom id={randID} />;\n      case \"puzzles\":\n        return <PuzzleRoom id={randID} />;\n      case \"bosses\":\n        return <BossRoom id={randID} />;\n      default:\n        break;\n    }\n  };\n\n  return <Stack>{switchRooms()}</Stack>;\n}\n","/home/user/dbms_project/dungeon_generator/client/src/components/BossRoom.js",["78"],"/home/user/dbms_project/dungeon_generator/client/src/components/PuzzleRoom.js",["79"],"import { Box, HStack, Stack, Text } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { BsPuzzleFill } from \"@react-icons/all-files/bs/BsPuzzleFill\";\n\nexport function PuzzleRoom({ id }) {\n  const [roomDetails, setRoomDetails] = useState([]);\n\n  const getRoomDetails = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/puzzles/${id}`);\n      const jsonData = await response.json();\n      setRoomDetails(jsonData);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getRoomDetails();\n  }, [id]);\n\n  const { name, description, solution, reward, punishment } = roomDetails;\n  return (\n    <Box>\n      <Stack isInline align=\"center\" mb=\"10\">\n        <Text fontWeight=\"bold\" fontSize=\"3xl\">\n          Puzzle Room\n        </Text>\n        <BsPuzzleFill color=\"blue\" size=\"2rem\" />\n      </Stack>\n      <Stack>\n        <HStack>\n          <Text color=\"yellow.400\" fontWeight=\"bold\" as=\"u\">\n            {name}:\n          </Text>\n          <Text color=\"blue.400\" fontWeight=\"bold\">\n            {description}!\n          </Text>\n        </HStack>\n\n        <HStack>\n          <Text>The Secret Solution:</Text>\n          <Text color=\"green.400\" fontWeight=\"bold\">\n            {solution}\n          </Text>\n        </HStack>\n        <HStack>\n          <Text>If they fail, they trigger a</Text>\n          <Text color=\"gray.500\" fontWeight=\"bold\">\n            {punishment}\n          </Text>\n          <Text>trap</Text>\n        </HStack>\n        <HStack>\n          <Text>If the puzzle is solved, they are rewarded with</Text>\n          <Text color=\"purple.300\" fontWeight=\"bold\">\n            {reward}\n          </Text>\n        </HStack>\n      </Stack>\n    </Box>\n  );\n}\n","/home/user/dbms_project/dungeon_generator/client/src/components/TrapRoom.js",["80"],"import { Box, HStack, Stack, Text } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { GiMantrap } from \"@react-icons/all-files/gi/GiMantrap\";\n\nexport function TrapRoom({ id }) {\n  const [roomDetails, setRoomDetails] = useState([]);\n\n  const getRoomDetails = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/traps/${id}`);\n      const jsonData = await response.json();\n      setRoomDetails(jsonData);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getRoomDetails();\n  }, [id]);\n\n  const { name, description, reward } = roomDetails;\n  return (\n    <Box>\n      <Stack isInline align=\"center\" mb=\"10\">\n        <Text fontWeight=\"bold\" fontSize=\"3xl\">\n          Trap Room\n        </Text>\n        <GiMantrap color=\"gray\" size=\"2rem\" />\n      </Stack>\n      <Stack>\n        <HStack>\n          <Text>The door shuts behind them, and they are faced with</Text>\n          <Text color=\"gray.500\" fontWeight=\"bold\">\n            {name}:\n          </Text>\n          <Text color=\"gray.500\" fontWeight=\"bold\">\n            {description}!\n          </Text>\n        </HStack>\n        <HStack>\n          <Text>If the trap is avoided, they are rewarded with</Text>\n          <Text color=\"purple.300\" fontWeight=\"bold\">\n            {reward}\n          </Text>\n        </HStack>\n      </Stack>\n    </Box>\n  );\n}\n","/home/user/dbms_project/dungeon_generator/client/src/components/MonsterRoom.js",["81"],"/home/user/dbms_project/dungeon_generator/client/src/components/SubmitForm.js",[],"/home/user/dbms_project/dungeon_generator/client/src/components/MonsterForm.js",["82"],"/home/user/dbms_project/dungeon_generator/client/src/components/BossForm.js",["83"],"/home/user/dbms_project/dungeon_generator/client/src/components/PuzzleForm.js",["84"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Text,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Button,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { Formik } from \"formik\";\n\nexport function PuzzleForm() {\n  const [treaures, setTreasures] = useState([]);\n  const [traps, setTraps] = useState([]);\n  const toast = useToast();\n\n  const getTreasures = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/treasures`);\n      const jsonData = await response.json();\n      setTreasures(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getTraps = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/traps`);\n      const jsonData = await response.json();\n      setTraps(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const postPuzzle = async (body) => {\n    try {\n      const response = await fetch(\"http://localhost:4111/puzzles\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n      toast({\n        title: \"Puzzle Submitted!\",\n        description:\n          \"You have successfully submitted the puzzle to the database\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Submission Error\",\n        description: error.message,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getTreasures();\n    getTraps();\n  }, []);\n  return (\n    <Box mx=\"10\" w=\"50%\">\n      <Text fontSize=\"3xl\" fontWeight=\"bold\">\n        Submit a New Puzzle:\n      </Text>\n      <Formik\n        initialValues={{\n          name: \"\",\n          description: \"\",\n          solution: \"\",\n          treasure: 1,\n          punishment: 1,\n        }}\n        onSubmit={(values, actions) => {\n          postPuzzle(values);\n          actions.setSubmitting(false);\n          window.location = \"/list\";\n        }}\n      >\n        {({ values, handleSubmit, handleChange, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl id=\"name\" isRequired>\n              <FormLabel>Name:</FormLabel>\n              <Input\n                type=\"text\"\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                placeholder=\"Insert wicked name here\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl id=\"description\" isRequired>\n              <FormLabel>Description:</FormLabel>\n              <Textarea\n                type=\"text\"\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                placeholder=\"Insert epic description here\"\n                name=\"description\"\n                value={values.description}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl id=\"solution\" isRequired>\n              <FormLabel>Solution:</FormLabel>\n              <Textarea\n                type=\"text\"\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                placeholder=\"Insert clever solution here\"\n                name=\"solution\"\n                value={values.solution}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl id=\"reward\" isRequired>\n              <FormLabel>Reward:</FormLabel>\n              <Select\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                name=\"treasure\"\n                value={values.treasure}\n                onChange={handleChange}\n              >\n                {treaures.map((treasure) => {\n                  return <option value={treasure.id}>{treasure.name}</option>;\n                })}\n              </Select>\n            </FormControl>\n            <FormControl id=\"punishment\" isRequired>\n              <FormLabel>Punishment:</FormLabel>\n              <Select\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                name=\"punishment\"\n                value={values.punishment}\n                onChange={handleChange}\n              >\n                {traps.map((trap) => {\n                  return <option value={trap.id}>{trap.name}</option>;\n                })}\n              </Select>\n            </FormControl>\n            <Button\n              colorScheme=\"purple\"\n              size=\"lg\"\n              type=\"submit\"\n              isLoading={isSubmitting}\n            >\n              Submit\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n}\n","/home/user/dbms_project/dungeon_generator/client/src/components/TrapForm.js",["85"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Text,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Button,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { Formik } from \"formik\";\n\nexport function TrapForm() {\n  const [treaures, setTreasures] = useState([]);\n  const toast = useToast();\n  const getTreasures = async () => {\n    try {\n      const response = await fetch(`http://localhost:4111/treasures`);\n      const jsonData = await response.json();\n      setTreasures(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const postTrap = async (body) => {\n    try {\n      const response = await fetch(\"http://localhost:4111/traps\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n      toast({\n        title: \"Trap Submitted!\",\n        description: \"You have successfully submitted the trap to the database\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Submission Error\",\n        description: error.message,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getTreasures();\n  }, []);\n  return (\n    <Box mx=\"10\" w=\"50%\">\n      <Text fontSize=\"3xl\" fontWeight=\"bold\">\n        Submit a New Trap:\n      </Text>\n      <Formik\n        initialValues={{ name: \"\", description: \"\", treasure: 1 }}\n        onSubmit={(values, actions) => {\n          postTrap(values);\n          actions.setSubmitting(false);\n          window.location = \"/list\";\n        }}\n      >\n        {({ values, handleSubmit, handleChange, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <FormControl id=\"name\" isRequired>\n              <FormLabel>Name:</FormLabel>\n              <Input\n                type=\"text\"\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                placeholder=\"Insert wicked name here\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl id=\"description\" isRequired>\n              <FormLabel>Description:</FormLabel>\n              <Textarea\n                type=\"text\"\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                placeholder=\"Insert epic description here\"\n                name=\"description\"\n                value={values.description}\n                onChange={handleChange}\n              />\n            </FormControl>\n\n            <FormControl id=\"reward\" isRequired>\n              <FormLabel>Reward:</FormLabel>\n              <Select\n                bgColor=\"gray.200\"\n                color=\"gray.800\"\n                mb=\"4\"\n                name=\"treasure\"\n                value={values.treasure}\n                onChange={handleChange}\n              >\n                {treaures.map((treasure) => {\n                  return <option value={treasure.id}>{treasure.name}</option>;\n                })}\n              </Select>\n            </FormControl>\n\n            <Button\n              colorScheme=\"purple\"\n              size=\"lg\"\n              type=\"submit\"\n              isLoading={isSubmitting}\n            >\n              Submit\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n}\n","/home/user/dbms_project/dungeon_generator/client/src/components/TreasureForm.js",["86","87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"91","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":23,"column":6,"nodeType":"97","endLine":23,"endColumn":16,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"99","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":10,"suggestions":"101"},{"ruleId":"95","severity":1,"message":"99","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":10,"suggestions":"102"},{"ruleId":"95","severity":1,"message":"99","line":20,"column":6,"nodeType":"97","endLine":20,"endColumn":10,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":42,"column":13,"nodeType":"106","messageId":"107","endLine":42,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":53,"column":13,"nodeType":"106","messageId":"107","endLine":53,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":42,"column":13,"nodeType":"106","messageId":"107","endLine":42,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":30,"column":13,"nodeType":"106","messageId":"107","endLine":30,"endColumn":21},{"ruleId":"104","severity":1,"message":"108","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"109","line":1,"column":28,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"105","line":21,"column":13,"nodeType":"106","messageId":"107","endLine":21,"endColumn":21},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTableSize'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has a missing dependency: 'getRoomDetails'. Either include it or remove the dependency array.",["113"],["114"],["115"],["116"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"119","fix":"121"},{"desc":"119","fix":"122"},{"desc":"119","fix":"123"},"Update the dependencies array to be: [getTableSize, roomType]",{"range":"124","text":"125"},"Update the dependencies array to be: [getRoomDetails, id]",{"range":"126","text":"127"},{"range":"128","text":"127"},{"range":"129","text":"127"},{"range":"130","text":"127"},[668,678],"[getTableSize, roomType]",[581,585],"[getRoomDetails, id]",[588,592],[578,582],[594,598]]